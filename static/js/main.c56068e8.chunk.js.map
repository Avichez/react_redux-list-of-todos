{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/getFilteredTodos.ts","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","text","status","initialState","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","hasSelected","dispatch","id","title","completed","className","cn","onClick","todoActions","TodoList","visibleTodos","length","map","TodoFilter","setQuery","onSubmit","event","preventDefault","value","onChange","newStatus","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","getUserById","a","userData","window","console","error","href","email","name","App","hasError","setHasError","getAllTodos","todosData","useMemo","filteredTodos","lowerCaseQuery","toLocaleLowerCase","toLowerCase","includes","getFilteredTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c56068e8.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype TodoState = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: TodoState = null,\n  action: Action,\n): TodoState => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype SetStatusAction = { type: 'filter/SET_STATUS', payload: Status };\n\nconst setQuery = (text: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: text,\n});\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype FilterState = {\n  query: string,\n  status: Status,\n};\ntype Action = SetQueryAction | SetStatusAction;\n\nconst initialState: FilterState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: FilterState = initialState,\n  action: Action,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n  hasSelected: boolean,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo, hasSelected }) => {\n  const dispatch = useAppDispatch();\n  const { id, title, completed } = todo;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': hasSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={cn({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(todoActions.setTodo(todo))}\n        >\n          <span className=\"icon\">\n            <i\n              className={cn('far', {\n                'fa-eye': !hasSelected,\n                'fa-eye-slash': hasSelected,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  visibleTodos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ visibleTodos }) => {\n  const { currentTodo } = useAppSelector(state => state);\n\n  if (!visibleTodos.length) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {visibleTodos.map(todo => {\n          const hasSelected = currentTodo?.id === todo.id;\n\n          return (\n            <TodoItem\n              key={todo.id}\n              todo={todo}\n              hasSelected={hasSelected}\n            />\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const setQuery = (text: string) => dispatch(actions.setQuery(text));\n  const setStatus = (newStatus: Status) => (\n    dispatch(actions.setStatus(newStatus))\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            value={status}\n            data-cy=\"statusSelect\"\n            onChange={event => setStatus(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          value={query}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={event => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"clear query\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as todoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  currentTodo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const dispatch = useAppDispatch();\n\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = currentTodo;\n\n  useEffect(() => {\n    const getUserById = async () => {\n      try {\n        const userData = await getUser(userId);\n\n        setUser(userData);\n      } catch (error) {\n        window.console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getUserById();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              <button\n                type=\"button\"\n                aria-label=\"close modal\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(todoActions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n                {' by '}\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todoActions } from './features/todos';\nimport { getFilteredTodos } from './utils/getFilteredTodos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const dispatch = useAppDispatch();\n  const { todos, currentTodo, filter } = useAppSelector(state => state);\n  const { query, status } = filter;\n\n  useEffect(() => {\n    const getAllTodos = async () => {\n      try {\n        const todosData = await getTodos();\n\n        dispatch(todoActions.setTodos(todosData));\n      } catch (error) {\n        window.console.error(error);\n        setHasError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getAllTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => (\n    getFilteredTodos(todos, query, status)\n  ), [todos, query, status]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : (\n                  <>\n                    {hasError && (\n                      <p className=\"has-text-danger\">\n                        Something went wrong, please reload the page!\n                      </p>\n                    )}\n                    {!hasError && <TodoList visibleTodos={visibleTodos} />}\n                  </>\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal currentTodo={currentTodo} />\n      )}\n    </>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  query: string,\n  status: Status,\n) => {\n  let filteredTodos = [...todos].filter(todo => {\n    switch (status) {\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  if (query) {\n    const lowerCaseQuery = query.toLocaleLowerCase();\n\n    filteredTodos = filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(lowerCaseQuery)\n    ));\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}